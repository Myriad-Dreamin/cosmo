[Nat.Zero match {
  case Nat.Zero => 1
}] => typeMatch (instance Nat::Zero() by Nat) {
 case Nat::Zero => 1
} else BottomKind(0), err: "missing case EnumField(class(Nat::Succ)) when matching ins (class(Nat::Zero))() on class(Nat)"
[Nat.Succ(Nat.Zero) match {
  case Nat.Succ(Nat.Zero) => 1
}] => typeMatch (instance Nat::Succ(instance Nat::Zero()) by Nat) {
 case Nat::Succ => block {
  ClassDestruct(ins (class(Nat::Succ))(ins (class(Nat::Zero))()),class(Nat::Succ),List((var _0_66:66 = NoneKind(0))))
  typeMatch (var _0_66@66: Nat = _ by Nat) {
   case Nat::Zero => 1
  } else BottomKind(0)
 }
} else BottomKind(0), err: "missing case EnumField(class(Nat::Succ)) when matching (var _0_66:66 = NoneKind(0)) on class(Nat)\nmissing case EnumField(class(Nat::Zero)) when matching ins (class(Nat::Succ))(ins (class(Nat::Zero))()) on class(Nat)"
[v2 match {
  case Nat.Zero => 0
  case Nat.Succ(x) => 1
}] => typeMatch (val v2@56: Nat = instance Nat::Succ(instance Nat::Zero()) by Nat) {
 case Nat::Zero => 0
 case Nat::Succ => block {
  ClassDestruct(ref(v2),class(Nat::Succ),List((var _0_71:71 = NoneKind(0))))
  var x@70: Nat = var _0_71@71: Nat = _
  1
 }
} else BottomKind(0), err: ""
[v2 match {
  case Nat.Zero => 0
  case Nat.Succ(Nat.Zero) => 1
  case Nat.Succ(Nat.Succ(x)) => 2
}] => typeMatch (val v2@56: Nat = instance Nat::Succ(instance Nat::Zero()) by Nat) {
 case Nat::Zero => 0
 case Nat::Succ => block {
  ClassDestruct(ref(v2),class(Nat::Succ),List((var _0_79:79 = NoneKind(0))))
  typeMatch (var _0_79@79: Nat = _ by Nat) {
   case Nat::Zero => 1
   case Nat::Succ => block {
    ClassDestruct((var _0_79:79 = NoneKind(0)),class(Nat::Succ),List((var _0_80:80 = NoneKind(0))))
    var x@78: Nat = var _0_80@80: Nat = _
    2
   }
  } else BottomKind(0)
 }
} else BottomKind(0), err: ""