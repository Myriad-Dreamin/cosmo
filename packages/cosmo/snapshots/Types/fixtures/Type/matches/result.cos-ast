[v0 match {
  case Result(i32, i32).Ok(t) => t
}] => typeMatch (v0@60 by class Result@49(T@50: TopKind(2), E@52: TopKind(2)) = block {
 class Result::Ok@54() = block {
  var _0@55: T@50 = _
 }
 class Result::Err@57() = block {
  var _0@58: E@52 = _
 }
}) {
 case class Result::Ok@54() = block {
  var _0@55: T@50 = _
 } => block {
  ClassDestruct(v0@60,class(Result::Ok),List(var(b_76), var(b_78), var(_0_79)))
  var t@73: T@50 = var _0_79@79: T@50 = _
  var t@73: T@50 = var _0_79@79: T@50 = _
 }
} else BottomKind(0), err: "missing case EnumField(class(Result::Err)) when matching v0@60 on class(Result<i32, i32>)"
[v1 match {
  case Result(i32, i32).Ok(t) => t
  case Result(i32, i32).Err(e) => ???
}] => typeMatch (v1@67 by class Result@49(T@50: TopKind(2), E@52: TopKind(2)) = block {
 class Result::Ok@54() = block {
  var _0@55: T@50 = _
 }
 class Result::Err@57() = block {
  var _0@58: E@52 = _
 }
}) {
 case class Result::Ok@54() = block {
  var _0@55: T@50 = _
 } => block {
  ClassDestruct(v1@67,class(Result::Ok),List(var(b_91), var(b_93), var(_0_94)))
  var t@84: T@50 = var _0_94@94: T@50 = _
  var t@84: T@50 = var _0_94@94: T@50 = _
 }
 case class Result::Err@57() = block {
  var _0@58: E@52 = _
 } => block {
  ClassDestruct(v1@67,class(Result::Err),List(var(b_96), var(b_98), var(_0_99)))
  var e@89: E@52 = var _0_99@99: E@52 = _
  TodoLit
 }
} else BottomKind(0), err: ""