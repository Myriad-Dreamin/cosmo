[v0 match {
  case Result(i32, i32).Ok(t) => t
}] => typeMatch (v0@61 by class Result@50(T@51: TopKind(2), E@53: TopKind(2)) = block {
 class Result::Ok@55() = block {
  var _0@56: T@51 = _
 }
 class Result::Err@58() = block {
  var _0@59: E@53 = _
 }
}) {
 case class Result::Ok@55() = block {
  var _0@56: T@51 = _
 } => block {
  ClassDestruct(v0@61,class(Result::Ok),List(var(b_77), var(b_79), var(_0_80)))
  var t@74: T@51 = var _0_80@80: T@51 = _
  var t@74: T@51 = var _0_80@80: T@51 = _
 }
} else BottomKind(0), err: "missing case EnumField(class(Result::Err)) when matching v0@61 on class(Result<i32, i32>)"
[v1 match {
  case Result(i32, i32).Ok(t) => t
  case Result(i32, i32).Err(e) => ???
}] => typeMatch (v1@68 by class Result@50(T@51: TopKind(2), E@53: TopKind(2)) = block {
 class Result::Ok@55() = block {
  var _0@56: T@51 = _
 }
 class Result::Err@58() = block {
  var _0@59: E@53 = _
 }
}) {
 case class Result::Ok@55() = block {
  var _0@56: T@51 = _
 } => block {
  ClassDestruct(v1@68,class(Result::Ok),List(var(b_92), var(b_94), var(_0_95)))
  var t@85: T@51 = var _0_95@95: T@51 = _
  var t@85: T@51 = var _0_95@95: T@51 = _
 }
 case class Result::Err@58() = block {
  var _0@59: E@53 = _
 } => block {
  ClassDestruct(v1@68,class(Result::Err),List(var(b_97), var(b_99), var(_0_100)))
  var e@90: E@53 = var _0_100@100: E@53 = _
  TodoLit
 }
} else BottomKind(0), err: ""