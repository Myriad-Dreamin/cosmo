
import "@lib/c++/cctype"
import stringSys from "@lib/c++/string"

pub def CppString: Type = stringSys.std.string

pub class Rune {
  var internal: u32;
}

pub class CString {
  var internal: CppString = stringSys.std.string();
}

pub class Bytes {
  var internal: CppString = stringSys.std.string();
}

code("""
inline bool operator<(const CString &lhs, const CString &rhs) {
  return lhs.internal < rhs.internal;
}
inline bool operator<(const Bytes &lhs, const Bytes &rhs) {
  return lhs.internal < rhs.internal;
}
inline bool operator==(const Rune &lhs, const Rune &rhs) {
  return lhs.internal == rhs.internal;
}

template <> struct DisplayTrait<Rune> {
  static void print(const Rune &x) {
    if (x.internal < 0x80 && std::isprint(x.internal)) {
      printf("'%c'", x.internal);
    } else {
      printf("c\"\\u{%x}\"", x.internal);
    }
  }
};
template <> struct DisplayTrait<CString> {
  static void print(const CString &x) { printf("%s", x.internal.c_str()); }
};
template <> struct DisplayTrait<Bytes> {
  static void print(const Bytes &x) {
    printf("b\"");
    for (char c : x.internal) {
      printf("\\x%02x", (unsigned char)c);
    }
    printf("\"");
  }
};
""")