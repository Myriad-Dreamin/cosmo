
import mmSys from "@lib/c++/memory"

pub class Box(T: Type) {
  var internal: mmSys.std.unique_ptr(T)

  // def new(t: T) = {
  //   internal = mmSys.std.move(mmSys.std.make_unique(t));
  // }
}

pub class Arc(T: Type) {
  var internal: mmSys.std.shared_ptr(T)

  // def new(t: T) = {
  //   internal = mmSys.std.move(mmSys.std.make_shared(t));
  // }
}

code("""
namespace cosmo {
template <typename T>
struct ptr {
  T *internal;
  ptr() : internal(nullptr) {}
  ptr(T *p) : internal(p) {}
  ptr(T &r) : internal(&r) {}

  
};
// FIXME: This is a hack to move value to head ptr.
// FIXME: Should be member function of ptr.
template <typename T, typename U>
ptr<T> allocRawPtr(U &&u) {
  return ptr<T>{new T(std::forward<U>(u))};
}
} // namespace cosmo
""")

pub class Ptr[T] {
  var internal: mmSys.cosmo.ptr(T) = mmSys.cosmo.ptr(T)();

  def alloc(t: T): Ptr(T) = {
    var res = Ptr(T)();
    res.internal = mmSys.cosmo.allocRawPtr(T)(t);
    res
  }
}

class AtomicOrdering {
  case Relaxed
  case Consume
  case Acquire
  case Release
}
