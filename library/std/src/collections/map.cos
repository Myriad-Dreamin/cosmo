
import mapSys from "@lib/c++/map"
import unorderedMapSys from "@lib/c++/unordered_map"

pub def CppMap(K: Type, V: Type): Type = mapSys.std.map(K, V)
pub def CppHashMap(K: Type, V: Type): Type = unorderedMapSys.std.unordered_map(K, V)

pub class Map(K: Type, V: Type) {
  var internal: CppMap(K, V) = CppMap(K, V)();
}

pub class HashMap(K: Type, V: Type) {
  var internal: CppHashMap(K, V) = CppHashMap(K, V)();
}

code("""
template <typename K, typename V> struct DisplayTrait<std::map<K, V>> {
  static void print(const std::map<K, V> &x) {
    printf("{");
    bool first = true;
    for (auto it = x.begin(); it != x.end(); ++it) {
      if (!first) {
        printf(", ");
      } else {
        first = false;
      }

      if constexpr (std::is_same_v<K, std::string>) {
        printf("\"%s\"", it->first.c_str());
      } else {
        ::print(it->first);
      }
      printf(": ");
      ::print(it->second);
    }
    printf("}");
  }
};
""")
