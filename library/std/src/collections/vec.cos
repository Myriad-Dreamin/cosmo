
import vectorSys from "@lib/c++/vector"

pub def CppVec(T: Type): Type = vectorSys.std.vector(T)

pub class Vec(T: Type) {
  var internal: CppVec(T) = CppVec(T)();

  def push(self, value: T) = {
    self.internal.push_back(value);
  }
  def size(self): usize = {
    self.internal.size()
  }

  def begin(&self) = {
    self.internal.begin()
  }
  def end(&self) = {
    self.internal.end()
  }
}

// template <typename T, typename Ctx, typename Cond = void> struct CppVec {
//   using type = std::vector<T>;
// };

// template <typename T> struct Vec;
// template <typename T> struct CppVec<T, Vec<T>> {
//   using type = std::vector<T>;
// };
// template <typename T> struct Vec {
//   using CppVec_T = typename CppVec<T, Vec<T>>::type;
//   static inline CppVec_T kInternalDefault = CppVec_T();
//   CppVec_T internal = kInternalDefault;
// };

// int main() {
//   Vec<int> vec;
//   vec.push(1);
//   vec.push(2);
//   vec.push(3);
//   return (vec.size());
// }
