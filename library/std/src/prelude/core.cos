
@noCore();

import cSys from "@lib/c++/cstdlib"

import _ from std::prelude::lang
import _ from std::prelude::core_stage1

// Notes: <:, >:, =:, &, |
// <: is a subtype relation
// >: is a supertype relation
// =: is an equality relation
// & is a conjunction synthesis
// | is a disjunction synthesis

import _ from std::option
import _ from std::result
import _ from std::str

import std::fmt

trait Formatter {
  def write(&mut self, s: &str): fmt::Result(());
}

trait Display {
  def display(&self, f: &mut Formatter): fmt::Result(());
}

trait ToString {
  def toString(&self): String;
}

// impl Display for bool {
//   def display(&self, f: &mut Formatter): fmt::Result(()) = {
//     if (*self) {
//       f.write("true")
//     } else {
//       f.write("false")
//     }
//   }
// }

// impl Display for str {
//   def display(&self, f: &mut Formatter): fmt::Result(()) = {
//     f.write(&self)
//   }
// }

// impl Display for f32 {
//   def display(&self, f: &mut Formatter): fmt::Result(()) = {
//     // cSys
//     val t: str = cSys.std::to_string(*self);
//     f.write(&t)
//   }
// }

// impl Display for f64 {
//   def display(&self, f: &mut Formatter): fmt::Result(()) = {
//     // cSys
//     val t: str = cSys.std::to_string(*self);
//     f.write(&t)
//   }
// }

// impl Formatter for String {
//   def write(&mut self, s: &str): fmt::Result(()) = {
//     self.push_str(s);
//     fmt::Result(())::Ok(())
//   }
// }

// // todo: correct signature is [T <: Display]
// def mprintln(t: &Display) = {
//   var s = String();
//   t.display(&mut s).unwrap();
//   println(s);
// }
