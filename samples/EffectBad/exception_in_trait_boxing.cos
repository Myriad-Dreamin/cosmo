
import std::io;
import (ExceptionBase, Exception, ExceptionEffect) from super::exception_base;

trait MFormatter {
  def write(&mut self, s: &AsRef(str)): io::Result<()>;
}

class CanBoxedFormatter {
  implicit val exceptionHandler: Handler(ExceptionEffect);
}

impl MFormatter for CanBoxedFormatter {

  def write(&mut self, s: &AsRef(str)): io::Result<()> = {
    throw Exception("Not implemented");
  }
}

def mprintln(s: &mut MFormatter) = {
  std::handle(ExceptionEffect, (e: &ExceptionBase) => {
    println("Caught exception Second: " + e.message());
    abort();
  });

  s.write("Hello, world!");
}

// Will print "Caught exception First: Not implemented"
def main() = {
  std::handle(ExceptionEffect, (e: &ExceptionBase) => {
    println("Caught exception First: " + e.message());
    abort();
  });

  var s = Box::new(CanBoxedFormatter());
  mprintln(s);
}
