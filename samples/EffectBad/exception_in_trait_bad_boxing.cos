
import std::io;
import (ExceptionBase, Exception, ExceptionEffect) from super::exception_base;

trait MFormatter {
  def write(&mut self, s: &AsRef(str)): io::Result<()>;
}

class CanNotBoxFormatter {
}

impl MFormatter for CanNotBoxFormatter {

  def write(&mut self, s: &AsRef(str)): io::Result<()> = {
    @expectError("""`ExceptionEffect` can not handled in lexical scopes.
Stack of checked lexical scopes:
- body of class CanNotBoxFormatter
- fn main when boxing CanNotBoxFormatter // var s = Box::new(CanNotBoxFormatter());
  - the exception handler cannot be stored in the box.
""")
    throw Exception("Not implemented");
  }
}

def mprintln(s: &mut MFormatter) = {
  s.write("Hello, world!");
}

// Will trigger compile error
def main() = {
  std::handle(ExceptionEffect, (e: &ExceptionBase) => {
    println("Caught exception First: " + e.message());
    abort();
  });

  var s = Box::new(CanNotBoxFormatter());
  mprintln(s);
}
